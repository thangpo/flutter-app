import 'dart:convert';
import 'dart:typed_data';
import 'package:pointycastle/block/aes_fast.dart';
import 'package:pointycastle/block/modes/ecb.dart';
import 'package:pointycastle/api.dart';

/// üß† Ti·ªán √≠ch gi·∫£i m√£ tin nh·∫Øn nh√≥m WoWonder
/// WoWonder m√£ ho√° tin nh·∫Øn b·∫±ng: AES-128-ECB v·ªõi key = message['time']
/// V√¨ v·∫≠y h√†m n√†y d√πng ƒë·ªÉ gi·∫£i m√£ v·ªÅ text g·ªëc hi·ªÉn th·ªã trong Flutter.
class MessageDecryptor {
  /// üîê Gi·∫£i m√£ AES-128-ECB t·ª´ WoWonder
  static String decryptAES128ECB(String base64Text, String key) {
    try {
      // ‚öôÔ∏è Key ch√≠nh l√† timestamp (v√≠ d·ª• "1761727143")
      final keyBytes = utf8.encode(key);
      final input = base64.decode(base64Text);

      // T·∫°o cipher AES-128-ECB
      final cipher = ECBBlockCipher(AESFastEngine())
        ..init(
          false, // false = decrypt
          KeyParameter(
              Uint8List.fromList(_normalizeKey(keyBytes, 16))), // key 16 bytes
        );

      // Gi·∫£i m√£ t·ª´ng block
      final output = _processBlocks(cipher, input);

      // Tr·∫£ k·∫øt qu·∫£ UTF-8, b·ªè padding th·ª´a
      return utf8
          .decode(output, allowMalformed: true)
          .replaceAll(
              RegExp(r'[\x00-\x1F\x7F-\x9F]+'), '') // üî• xo√° s·∫°ch k√Ω t·ª± control
          .trim();

    } catch (e) {
      // N·∫øu l·ªói (v√≠ d·ª• text kh√¥ng ph·∫£i base64), tr·∫£ nguy√™n text
      return base64Text;
    }
  }

  /// üß© Gi·∫£i m√£ theo block 16 byte
  static List<int> _processBlocks(BlockCipher cipher, List<int> input) {
    final output = <int>[];
    for (var offset = 0; offset < input.length;) {
      final chunk = input.skip(offset).take(cipher.blockSize).toList();

      // Padding n·∫øu thi·∫øu bytes
      while (chunk.length < cipher.blockSize) {
        chunk.add(0);
      }

      // ‚ö°Ô∏è PointyCastle y√™u c·∫ßu Uint8List
      output.addAll(cipher.process(Uint8List.fromList(chunk)));
      offset += cipher.blockSize;
    }
    return output;
  }

  /// üß± ƒê·∫£m b·∫£o key ƒë·ªß 16 bytes cho AES-128
  static List<int> _normalizeKey(List<int> key, int size) {
    if (key.length == size) return key;
    if (key.length > size) return key.sublist(0, size);
    return [...key, ...List.filled(size - key.length, 0)];
  }
}
